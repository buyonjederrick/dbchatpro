@page "/dashboard"
@using System.Text.Json
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager Navigation

<PageTitle>Enterprise Dashboard - DBChatPro</PageTitle>

<div class="dashboard-container">
    <!-- Header Section -->
    <div class="dashboard-header">
        <div class="header-content">
            <h1 class="dashboard-title">
                <i class="fas fa-chart-line"></i>
                Enterprise Dashboard
            </h1>
            <div class="header-actions">
                <button class="btn btn-primary" @onclick="RefreshData">
                    <i class="fas fa-sync-alt"></i>
                    Refresh
                </button>
                <button class="btn btn-outline-secondary" @onclick="() => Navigation.NavigateTo("/settings")">
                    <i class="fas fa-cog"></i>
                    Settings
                </button>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="loading-container">
            <div class="spinner"></div>
            <p>Loading dashboard data...</p>
        </div>
    }
    else
    {
        <!-- Metrics Cards -->
        <div class="metrics-grid">
            <div class="metric-card">
                <div class="metric-icon">
                    <i class="fas fa-database"></i>
                </div>
                <div class="metric-content">
                    <h3>@metrics?.mcpMetrics?.TotalQueriesExecuted</h3>
                    <p>Total Queries</p>
                </div>
            </div>

            <div class="metric-card">
                <div class="metric-icon success">
                    <i class="fas fa-check-circle"></i>
                </div>
                <div class="metric-content">
                    <h3>@metrics?.mcpMetrics?.SuccessfulQueries</h3>
                    <p>Successful</p>
                </div>
            </div>

            <div class="metric-card">
                <div class="metric-icon warning">
                    <i class="fas fa-exclamation-triangle"></i>
                </div>
                <div class="metric-content">
                    <h3>@metrics?.mcpMetrics?.FailedQueries</h3>
                    <p>Failed</p>
                </div>
            </div>

            <div class="metric-card">
                <div class="metric-icon info">
                    <i class="fas fa-clock"></i>
                </div>
                <div class="metric-content">
                    <h3>@(metrics?.mcpMetrics?.AverageExecutionTimeMs)ms</h3>
                    <p>Avg Execution</p>
                </div>
            </div>
        </div>

        <!-- Connection Status -->
        <div class="status-section">
            <h2>Connection Status</h2>
            <div class="status-card @(metrics?.connectionStatus?.IsConnected == true ? "connected" : "disconnected")">
                <div class="status-indicator"></div>
                <div class="status-content">
                    <h4>@metrics?.connectionStatus?.DatabaseType Database</h4>
                    <p>@(metrics?.connectionStatus?.IsConnected == true ? "Connected" : "Disconnected")</p>
                    @if (!string.IsNullOrEmpty(metrics?.connectionStatus?.ErrorMessage))
                    {
                        <small class="error-message">@metrics?.connectionStatus?.ErrorMessage</small>
                    }
                </div>
            </div>
        </div>

        <!-- Charts Section -->
        <div class="charts-section">
            <div class="chart-container">
                <h3>Query Performance</h3>
                <div class="chart" id="performanceChart"></div>
            </div>

            <div class="chart-container">
                <h3>AI Model Usage</h3>
                <div class="chart" id="modelChart"></div>
            </div>
        </div>

        <!-- Recent Activity -->
        <div class="activity-section">
            <h2>Recent Activity</h2>
            <div class="activity-list">
                @if (recentQueries?.Any() == true)
                {
                    @foreach (var query in recentQueries.Take(5))
                    {
                        <div class="activity-item @(query.IsSuccessful ? "success" : "error")">
                            <div class="activity-icon">
                                <i class="fas @(query.IsSuccessful ? "fa-check" : "fa-times")"></i>
                            </div>
                            <div class="activity-content">
                                <p class="activity-prompt">@(query.UserPrompt.Length > 50 ? query.UserPrompt.Substring(0, 50) + "..." : query.UserPrompt)</p>
                                <small>@query.CreatedAt.ToString("MMM dd, yyyy HH:mm") • @query.AiModel • @query.RowsReturned rows</small>
                            </div>
                            <div class="activity-time">
                                <span>@query.ExecutionTimeMs ms</span>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <p class="no-activity">No recent activity</p>
                }
            </div>
        </div>

        <!-- Quick Actions -->
        <div class="actions-section">
            <h2>Quick Actions</h2>
            <div class="action-buttons">
                <button class="action-btn" @onclick="() => Navigation.NavigateTo("/")">
                    <i class="fas fa-comments"></i>
                    New Query
                </button>
                <button class="action-btn" @onclick="() => Navigation.NavigateTo("/connect")">
                    <i class="fas fa-plug"></i>
                    Manage Connections
                </button>
                <button class="action-btn" @onclick="ShowAuditLogs">
                    <i class="fas fa-history"></i>
                    Audit Logs
                </button>
                <button class="action-btn" @onclick="ShowMetrics">
                    <i class="fas fa-chart-bar"></i>
                    Detailed Metrics
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    private bool isLoading = true;
    private dynamic? metrics;
    private List<dynamic>? recentQueries;

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        try
        {
            isLoading = true;
            
            // Load metrics
            var metricsResponse = await Http.GetAsync("api/enterprise/metrics");
            if (metricsResponse.IsSuccessStatusCode)
            {
                metrics = await metricsResponse.Content.ReadFromJsonAsync<dynamic>();
            }

            // Load recent queries
            var queriesResponse = await Http.GetAsync("api/ai/history?pageSize=5");
            if (queriesResponse.IsSuccessStatusCode)
            {
                var queryResult = await queriesResponse.Content.ReadFromJsonAsync<dynamic>();
                recentQueries = queryResult?.data?.ToObject<List<dynamic>>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading dashboard data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RefreshData()
    {
        await LoadDashboardData();
    }

    private void ShowAuditLogs()
    {
        Navigation.NavigateTo("/audit-logs");
    }

    private void ShowMetrics()
    {
        Navigation.NavigateTo("/metrics");
    }
}

<style>
    .dashboard-container {
        max-width: 1400px;
        margin: 0 auto;
        padding: 20px;
        background: #f8f9fa;
        min-height: 100vh;
    }

    .dashboard-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 30px;
        border-radius: 15px;
        margin-bottom: 30px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.1);
    }

    .header-content {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .dashboard-title {
        font-size: 2.5rem;
        font-weight: 700;
        margin: 0;
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .header-actions {
        display: flex;
        gap: 15px;
    }

    .btn {
        padding: 12px 24px;
        border: none;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .btn-primary {
        background: rgba(255,255,255,0.2);
        color: white;
        backdrop-filter: blur(10px);
    }

    .btn-primary:hover {
        background: rgba(255,255,255,0.3);
        transform: translateY(-2px);
    }

    .btn-outline-secondary {
        background: transparent;
        color: white;
        border: 2px solid rgba(255,255,255,0.3);
    }

    .btn-outline-secondary:hover {
        background: rgba(255,255,255,0.1);
        border-color: rgba(255,255,255,0.5);
    }

    .metrics-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .metric-card {
        background: white;
        padding: 25px;
        border-radius: 15px;
        box-shadow: 0 5px 20px rgba(0,0,0,0.08);
        display: flex;
        align-items: center;
        gap: 20px;
        transition: transform 0.3s ease;
    }

    .metric-card:hover {
        transform: translateY(-5px);
    }

    .metric-icon {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 24px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
    }

    .metric-icon.success {
        background: linear-gradient(135deg, #56ab2f 0%, #a8e6cf 100%);
    }

    .metric-icon.warning {
        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
    }

    .metric-icon.info {
        background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
    }

    .metric-content h3 {
        font-size: 2rem;
        font-weight: 700;
        margin: 0;
        color: #2d3748;
    }

    .metric-content p {
        margin: 5px 0 0 0;
        color: #718096;
        font-weight: 500;
    }

    .status-section {
        margin-bottom: 30px;
    }

    .status-section h2 {
        font-size: 1.5rem;
        font-weight: 600;
        margin-bottom: 15px;
        color: #2d3748;
    }

    .status-card {
        background: white;
        padding: 20px;
        border-radius: 12px;
        box-shadow: 0 5px 20px rgba(0,0,0,0.08);
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .status-card.connected {
        border-left: 4px solid #48bb78;
    }

    .status-card.disconnected {
        border-left: 4px solid #f56565;
    }

    .status-indicator {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        background: #48bb78;
    }

    .status-card.disconnected .status-indicator {
        background: #f56565;
    }

    .status-content h4 {
        margin: 0;
        font-weight: 600;
        color: #2d3748;
    }

    .status-content p {
        margin: 5px 0;
        color: #718096;
    }

    .error-message {
        color: #f56565;
        font-size: 0.875rem;
    }

    .charts-section {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .chart-container {
        background: white;
        padding: 25px;
        border-radius: 15px;
        box-shadow: 0 5px 20px rgba(0,0,0,0.08);
    }

    .chart-container h3 {
        margin: 0 0 20px 0;
        font-weight: 600;
        color: #2d3748;
    }

    .chart {
        height: 300px;
        background: #f7fafc;
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #718096;
    }

    .activity-section {
        margin-bottom: 30px;
    }

    .activity-section h2 {
        font-size: 1.5rem;
        font-weight: 600;
        margin-bottom: 15px;
        color: #2d3748;
    }

    .activity-list {
        background: white;
        border-radius: 12px;
        box-shadow: 0 5px 20px rgba(0,0,0,0.08);
        overflow: hidden;
    }

    .activity-item {
        display: flex;
        align-items: center;
        padding: 20px;
        border-bottom: 1px solid #e2e8f0;
        transition: background-color 0.3s ease;
    }

    .activity-item:hover {
        background: #f7fafc;
    }

    .activity-item:last-child {
        border-bottom: none;
    }

    .activity-item.success {
        border-left: 4px solid #48bb78;
    }

    .activity-item.error {
        border-left: 4px solid #f56565;
    }

    .activity-icon {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 15px;
        background: #48bb78;
        color: white;
    }

    .activity-item.error .activity-icon {
        background: #f56565;
    }

    .activity-content {
        flex: 1;
    }

    .activity-prompt {
        margin: 0;
        font-weight: 500;
        color: #2d3748;
    }

    .activity-content small {
        color: #718096;
        font-size: 0.875rem;
    }

    .activity-time {
        color: #718096;
        font-size: 0.875rem;
        font-weight: 500;
    }

    .no-activity {
        padding: 40px;
        text-align: center;
        color: #718096;
    }

    .actions-section {
        margin-bottom: 30px;
    }

    .actions-section h2 {
        font-size: 1.5rem;
        font-weight: 600;
        margin-bottom: 15px;
        color: #2d3748;
    }

    .action-buttons {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 15px;
    }

    .action-btn {
        background: white;
        border: 2px solid #e2e8f0;
        padding: 20px;
        border-radius: 12px;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 10px;
        font-weight: 500;
        color: #2d3748;
    }

    .action-btn:hover {
        border-color: #667eea;
        transform: translateY(-2px);
        box-shadow: 0 5px 20px rgba(0,0,0,0.1);
    }

    .action-btn i {
        font-size: 24px;
        color: #667eea;
    }

    .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 60px;
        color: #718096;
    }

    .spinner {
        width: 40px;
        height: 40px;
        border: 4px solid #e2e8f0;
        border-top: 4px solid #667eea;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin-bottom: 20px;
    }

    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    @media (max-width: 768px) {
        .dashboard-container {
            padding: 15px;
        }

        .dashboard-title {
            font-size: 2rem;
        }

        .header-content {
            flex-direction: column;
            gap: 20px;
            text-align: center;
        }

        .metrics-grid {
            grid-template-columns: 1fr;
        }

        .charts-section {
            grid-template-columns: 1fr;
        }

        .action-buttons {
            grid-template-columns: 1fr;
        }
    }
</style>